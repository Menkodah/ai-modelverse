version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_ML_ENGINE_URL=http://ml-engine:8001
    depends_on:
      - backend
    networks:
      - modelverse-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:modelverse@postgres:5432/modelverse
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ML_ENGINE_URL=http://ml-engine:8001
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=modelverse
      - MINIO_SECRET_KEY=modelverse123
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - modelverse-network
    restart: unless-stopped

  # ML Engine
  ml-engine:
    build:
      context: ./ml-engine
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:modelverse@postgres:5432/modelverse
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=modelverse
      - MINIO_SECRET_KEY=modelverse123
    volumes:
      - ml-models:/app/models
      - ml-data:/app/data
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - modelverse-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=modelverse
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=modelverse
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - modelverse-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - modelverse-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=modelverse
      - MINIO_ROOT_PASSWORD=modelverse123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - modelverse-network
    restart: unless-stopped

  # MongoDB (for document storage)
  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=modelverse
      - MONGO_INITDB_ROOT_PASSWORD=modelverse123
      - MONGO_INITDB_DATABASE=modelverse
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - modelverse-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ml-engine
    networks:
      - modelverse-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - modelverse-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=modelverse123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - modelverse-network
    restart: unless-stopped

  # Elasticsearch (for logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - modelverse-network
    restart: unless-stopped

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - modelverse-network
    restart: unless-stopped

  # RabbitMQ (for message queuing)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=modelverse
      - RABBITMQ_DEFAULT_PASS=modelverse123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - modelverse-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  minio-data:
  mongodb-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  rabbitmq-data:
  ml-models:
  ml-data:

networks:
  modelverse-network:
    driver: bridge
